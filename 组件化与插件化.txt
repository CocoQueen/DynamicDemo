组件化与插件化

什么是组件化？

组件化是在项目层面上的架构思想，适用于多端产品（如滴滴有司机端，用户端两个端口）。主要通过将多个端口通用的一些基础代码、页面、甚至是业务代码封装成组件的方式，达到只需维护一份组件代码，就可以在多个端的工程中生效共用的效果，达到高效、高复用、易维护的效果，能够大大的提升开发者的开发效率。

组件化有什么好处?

1.高度解耦，将通用组件都封装起来
2.高可复用，可将组件应用于其他任何项目
3.方便维护，只需维护一次组件，其他所有引用项目都会生效

适合人群

1.具备Android基础知识

项目发展：
项目业务需求的复杂度提升，代码量越来越多，具有通用功能模块或者重复功能模块
  1、各种业务，模块耦合在一起，不利于维护和阅读
  2、一个小小的功能改动，就要全局编译，编译等待时长过多
  3、代码量越来越庞大，需要进行合理拆分
  4、对于测试团队来说，新功能无法单独调试

对于上述几点，可通过组件化与插件化来满足需求。

组件化与插件化的概念

组件化----模块组件与通用组件，可分为业务组件与UI组件等等
比如下拉刷新可作为多个项目使用的Ui组件，如登录模块有多条业务线采用相同逻辑，可作为业务组件存在，多个团队使用
插件化----将一个APK划分为不同的“APK”，比如常用的App换肤可理解为一个插件apk

组件化：
将apk拆分为多个模块（组件）进行开发，开发阶段组件可单独测试，通用组件可进行依赖复用，待开发完毕阶段，将所有模块（组件）进行合并，合并为真正的apk

组件化的好处：
1、业务组件可以单独分配并行开发
2、单个组件业务可以由开发者自行决定采取MVC/MVP/MVVM架构而不影响整体大局
3、接手项目分配任务可单独分配某一个模块任务，不必关心整个项目
4、开发效率提升，开发过程仅仅需要维护开发自己的组件内容
5、若公司有多个团队，优秀代码组件可快速移植复用
6、积累个人的组件仓库，摆脱复制粘贴的“搬砖工”身份
7、测试可单独测试某个模块

插件化:
apk含有多个模块，含有一个主模块和附属模块，每一个模块都是一个apk，开发完毕后将主模块apk和其他模块apk（插件apk）进行打包。

插件化的好处：
1、可对apk进行模块解耦
2、开发效率提升，可并行开发
3、可动态升级
4、按需加载节省内存

开源插件化框架：(github)
AndroidAynamicLoader
dynamic-load-apk
Small
DynamicAPK


总结：
1、插件化与组件化的最终目标都是为了解耦模块，避免模块之间的依赖耦合，提升团队的开发效率
2、插件化与组件化都可对单独的模块进行开发测试，每个模块高度解耦，单独存在不依赖于其他模块进行

相对而言，组件化方式更简单，无需关注hook技术，类的加载，资源加载等等一系列问题，技术成本相对较低，故此，在大型项目协作开发时，推荐使用组件化开发。


随着技术发展，项目的更新维护，业务的增加，组件化方案是大趋势。

对于组件化技术而言难度不大，难点在于业务的解耦。具体是否选择组件化方式还是要根据项目大小，时间节点来决定。







组件化开发的需求背景：

1、项目越来越大，功能模块越来越多
2、某单一功能模块在被多个团队开发使用
3、业务模块耦合严重，单一功能开发依赖于其他模块
4、开发效率低下，功能改动需要编译整个项目
5、并行开发过程中，若有报错提代码，可能导致项目暂时停止，不得不停下来协同查找问题。





组件以及第三SDK的版本控制

组件化开发中存在多个组件与模块，必须考虑每个模块的统一性，所以需要对每一个module进行support包，第三方SDK配置的统一管理。

统一配置以后供其他组件模块使用。




